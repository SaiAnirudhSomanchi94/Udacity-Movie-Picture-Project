name: 2. CI/CD Workflow Front End

on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'  # Trigger only if code in the frontend folder changes

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend

      - name: Run tests
        run: npm run test
        working-directory: starter/frontend

  build:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker build -t my-frontend-app:${{ github.sha }} -f starter/frontend/Dockerfile .

      - name: Tag Docker image
        run: |
          docker tag my-frontend-app:${{ github.sha }} my-frontend-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: 'us-west-2'

      - name: Push Docker image to ECR
        run: |
          # Login to Amazon ECR
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
          
          # Tag and push image
          docker tag my-frontend-app:${{ github.sha }} ${{ secrets.AWS_ECR_URL }}/my-frontend-app:${{ github.sha }}
          docker push ${{ secrets.AWS_ECR_URL }}/my-frontend-app:${{ github.sha }}

      - name: Deploy to Kubernetes
        run: |
          # Apply Kubernetes manifests with the built image tag
          kubectl set image deployment/frontend-deployment frontend=${{ secrets.AWS_ECR_URL }}/my-frontend-app:${{ github.sha }}
          kubectl apply -f kubernetes/manifests

  # Optional: If deploying manually, we can trigger this from the GitHub UI
  workflow_dispatch:
    inputs:
      trigger_manual:
        description: 'Manually trigger CD pipeline'
        required: false
        default: 'false'
