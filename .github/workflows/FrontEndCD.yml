name: 2. CI/CD Workflow Front End

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'  # Trigger only when code in the frontend changes
  workflow_dispatch:  # Allow manual triggers

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install starter/frontend/

      - name: Run tests
        run: npm test  # Assuming npm test is configured in package.json

  build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: test  # Only run after the test job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        run: |
          cd starter/frontend
          docker build -t frontend-image:${{ github.sha }} .
          
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker image for ECR
        run: |
          docker tag frontend-image:${{ github.sha }} ${{ secrets.AWS_ECR_REGISTRY }}/frontend-image:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/frontend-image:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Kubernetes
    needs: build  # Only run after the build job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ secrets.AWS_REGION }}

      - name: Apply Kubernetes manifests
        run: |
          kubectl set image deployment/frontend-deployment frontend=${{ secrets.AWS_ECR_REGISTRY }}/frontend-image:${{ github.sha }} --record
          kubectl apply -f k8s/  # Assuming Kubernetes manifests are stored under 'k8s/' directory
