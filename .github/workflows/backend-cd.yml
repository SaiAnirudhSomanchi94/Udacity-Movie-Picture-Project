name: 4. CI/CD Workflow Back End

on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'  # Trigger only if code in the backend folder changes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Run eslint
        run: |
          cd frontend
          npm run lint

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' }}
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Create ECR repository (if it doesn't exist)
        run: |
          aws ecr describe-repositories --repository-name my-backend-app  --region ${{ secrets.REGION }} || aws ecr create-repository --repository-name my-backend-app  --region ${{ secrets.REGION }}
      

      - name: Build Docker image
        run: |
          cd backend
          docker build -t my-backend-app:${{ github.sha }} -f starter/backend/Dockerfile .
      
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      - name: Push Docker image to ECR
        run: |
          docker tag my-backend-app:${{ github.sha }} ${{ secrets.AWS_ECR_URL }}/my-backend-app:${{ github.sha }}
          docker push ${{ secrets.AWS_ECR_URL }}/my-backend-app:${{ github.sha }}
      
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name my-cluster-1

      - name: Kubernetes Configure
        run: |
          kubectl apply -f starter/backend/k8s/service.yaml
          kubectl apply -f starter/backend/k8s/deployment.yaml

      - name: Kubernetes Get Deployments
        run: |
          kubectl get deployments

      - name: Set image for Deployment
        run: |
          kubectl set image deployment/backend backend=${{ secrets.AWS_ECR_URL }}/my-backend-app:${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.4'
      - name: Deploy application
        run: |
          kubectl apply -f k8s/deployment.yaml