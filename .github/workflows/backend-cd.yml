name: 4. CI/CD Workflow Back End

on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'  # Trigger only if code in the backend folder changes
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      # - name: Install dependencies
      #   run: npm install
      #   working-directory: starter/backend

      # - name: Run tests
      #   run: npm run test
      #   working-directory: starter/backend

  build:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker build -t my-backend-app:${{ github.sha }} -f starter/backend/Dockerfile .
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      
      - name: List Docker images (debugging)
        run: |
          docker images  # List all Docker images to verify the image exist

      - name: Create ECR repository (if it doesn't exist)
        run: |
          aws ecr describe-repositories --repository-name my-backend-app  --region ${{ secrets.REGION }} || aws ecr create-repository --repository-name my-backend-app  --region ${{ secrets.REGION }}
      
      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      - name: Push Docker image to ECR
        run: |
          docker tag my-backend-app:${{ github.sha }} ${{ secrets.AWS_ECR_URL }}/my-backend-app:${{ github.sha }}
          docker push ${{ secrets.AWS_ECR_URL }}/my-backend-app:${{ github.sha }}
      
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name my-cluster-1

      - name: Kubernetes Configure
        run: |
          kubectl apply -f starter/backend/k8s/service.yaml
          kubectl apply -f starter/backend/k8s/deployment.yaml

      - name: Kubernetes Get Deployments
        run: |
          kubectl get deployments

      - name: Set image for Deployment
        run: |
          kubectl set image deployment/backend backend=${{ secrets.AWS_ECR_URL }}/my-backend-app:${{ github.sha }}

      # - name: Verify Deployment
      #   run: |
      #     kubectl rollout status deployment/backend

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Deployed
        run: |
          echo "Deployed"

      
